plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}

android {

    kapt {
        generateStubs = true
    }

    dataBinding {
        enabled = true
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        flavorDimensions rootProject.ext.android.versionName
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            // No debug config
            // 签名store文件路径
            storeFile file(rootProject.ext.signing.storeFile)
            // 签名store文件的密码
            storePassword rootProject.ext.signing.storePassword
            // 别名
            keyAlias rootProject.ext.signing.keyAlias
            // 别名的密码
            keyPassword rootProject.ext.signing.keyPassword
        }
        // 正式版
        release {
            // 签名store文件路径
            storeFile file(rootProject.ext.signing.storeFile)
            // 签名store文件的密码
            storePassword rootProject.ext.signing.storePassword
            // 别名
            keyAlias rootProject.ext.signing.keyAlias
            // 别名的密码
            keyPassword rootProject.ext.signing.keyPassword
        }
    }


    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // 版本名后缀
            versionNameSuffix "-debug"
            // 是否混淆
            minifyEnabled false
            // zipAlign优化
            zipAlignEnabled false
            // 是否可以debug
            debuggable true
            jniDebuggable true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            // 是否混淆
            minifyEnabled true
            // zipAlign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 混淆配置文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                if (variant.buildType.name == "debug") {
                    outputFileName = "${getAppName()}_V${defaultConfig.versionName}_${variant.productFlavors[0].name}_${variant.buildType.name}.apk"
                } else {
                    outputFileName = "${getAppName()}_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_release_${releaseTime()}.apk"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    productFlavors {
        // 渠道标识
        google {}
        xiaomi {}
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL_VALUE: name] //动态地修改AndroidManifest中的渠道名
    }

}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.3"

    //版本要与gradle版本一致
    kapt "com.android.databinding:compiler:4.1.2"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // 如果使用2.2.0之后版本，直接使用下面依赖库，该依赖库中没有ViewModelProviders.of方法
    implementation "androidx.lifecycle:lifecycle-process:2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.1"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.activity:activity-ktx:1.2.3'

    // OkHttp3
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'org.koin:koin-androidx-scope:2.1.5'
    implementation 'org.koin:koin-androidx-viewmodel:2.1.5'
    implementation 'org.koin:koin-androidx-fragment:2.1.5'
    implementation 'org.koin:koin-androidx-ext:2.1.5'

    // mmkv
    implementation 'com.tencent:mmkv:1.0.22'
    implementation 'com.getkeepsafe.relinker:relinker:1.3.1'

    // glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    // 适配
    implementation 'me.jessyan:autosize:1.2.1'

    // 沉浸式状态栏
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'

    // 动态权限申请
    implementation 'com.github.tbruyelle:rxpermissions:0.12'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.4'

    implementation 'com.github.lihangleo2:ShadowLayout:3.2.0'

    implementation 'com.wang.avi:library:2.1.3'

    // smart refresh
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    implementation 'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
    implementation 'com.scwang.smart:refresh-header-material:2.0.0-alpha-1'    //谷歌刷新头
    implementation 'com.scwang.smart:refresh-footer-classics:2.0.1'

    implementation 'com.youth.banner:banner:2.1.0'

    // recyclerView的Databinding套装
    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter:2.2.0'
    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter-recyclerview:2.2.0'

    // 时间选择
    implementation 'com.contrarywind:Android-PickerView:4.1.9'

}

// 生成打包时间
static def releaseTime() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HHmmss')
    return formattedDate
}

def getAppName() {
    try {
        def stringsFile = file("./src/main/res/values/strings.xml")
        def appName = new XmlParser().parse(stringsFile).string.find {
            it.@name.equals 'app_name'
        }.text()
        def regex = ' '
        def matcher = (appName =~ /${regex}/)
        return matcher.replaceAll('')
    } catch (e) {
        println(e)
        return "AppName"
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("bundle")) {
        def renameTaskName = "rename${task.name.capitalize()}Aab"
        def releaseGoogleAab = "app-google-release.aab"
        def releaseGooglePath = "googleRelease"

        def xiaomiReleaseAab = "app-xiaomi-release.aab"
        def xiaomiReleasePath = "xiaomiRelease"

        tasks.create(renameTaskName, Copy) {
            def googlePath = "${buildDir}/outputs/bundle/${releaseGooglePath}/"
            from(googlePath)
            include releaseGoogleAab
            destinationDir file("${buildDir}/outputs/renamedBundle/")
            rename releaseGoogleAab, "${rootProject.getName()}_${releaseTime()}_${"google"}.aab"

            def xiaoMiPath = "${buildDir}/outputs/bundle/${xiaomiReleasePath}/"
            from(xiaoMiPath)
            include xiaomiReleaseAab
            destinationDir file("${buildDir}/outputs/renamedBundle/")
            rename xiaomiReleaseAab, "${rootProject.getName()}_${releaseTime()}_${"xiaomi"}.aab"
        }

        task.finalizedBy(renameTaskName)
    }
}
